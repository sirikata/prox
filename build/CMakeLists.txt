#CMakeLists.txt
#Copyright (c) 2008, Ewen Cheslack-Postava
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#    * Neither the name of the libprox nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#cmake options

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

#project global flags
PROJECT(libprox C CXX)

# Settings
IF(NOT DEFINED LIBPROX_BUILD_PROXSIM)
  SET(LIBPROX_BUILD_PROXSIM TRUE CACHE BOOL "If TRUE, build the proxsim demos.")
ELSE()
  SET(LIBPROX_BUILD_PROXSIM ${LIBPROX_BUILD_PROXSIM} CACHE BOOL "If TRUE, build the proxsim demos.")
ENDIF()
# This is the variable we actually use, it's initialized to the
# setting, but may fail due to missing libraries
SET(LIBPROX_SHOULD_BUILD_PROXSIM ${LIBPROX_BUILD_PROXSIM})

SET(LIBPROX_RTREE_DATA_DESC "The type of data to store in each node for constraint testing. Options: BOUNDS, MAXSIZE, or SIMILARMAXSIZE.")
IF(NOT DEFINED LIBPROX_RTREE_DATA)
  SET(LIBPROX_RTREE_DATA "MAXSIZE"
    CACHE STRING ${LIBPROX_RTREE_DATA_DESC})
ELSE()
  SET(LIBPROX_RTREE_DATA ${LIBPROX_RTREE_DATA}
    CACHE STRING ${LIBPROX_RTREE_DATA_DESC})
ENDIF()

IF(NOT DEFINED LIBPROX_DEBUG_VALIDATE)
  SET(LIBPROX_DEBUG_VALIDATE FALSE CACHE BOOL "If true, performs (very slow) validation steps to help with debugging.")
ELSE()
  SET(LIBPROX_DEBUG_VALIDATE ${LIBPROX_DEBUG_VALIDATE} CACHE BOOL "If true, performs (very slow) validation steps to help with debugging.")
ENDIF()

SET(LIBPROX_RTREE_LIFT_CUTS_DESC "If true, uses cut lifting to handle changes to nodes with cuts running through them.")
IF(NOT DEFINED LIBPROX_RTREE_LIFT_CUTS)
  SET(LIBPROX_RTREE_LIFT_CUTS TRUE CACHE BOOL ${LIBPROX_RTREE_LIFT_CUTS_DESC})
ELSE()
  SET(LIBPROX_RTREE_LIFT_CUTS ${LIBPROX_RTREE_LIFT_CUTS} CACHE BOOL ${LIBPROX_RTREE_LIFT_CUTS_DESC})
ENDIF()

SET(LIBPROX_BUILD_TESTS_DESC "If TRUE, builds tests.")
IF(NOT DEFINED LIBPROX_BUILD_TESTS)
  SET(LIBPROX_BUILD_TESTS TRUE CACHE BOOL ${LIBPROX_BUILD_TESTS_DESC})
ELSE()
  SET(LIBPROX_BUILD_TESTS ${LIBPROX_BUILD_TEST} CACHE BOOL ${LIBPROX_BUILD_TESTS_DESC})
ENDIF()
# This is the variable we actually use, it's initialized to the
# setting, but may fail due to missing libraries
SET(LIBPROX_SHOULD_BUILD_TESTS ${LIBPROX_BUILD_TESTS})



IF(NOT LIBPROX_TOP_LEVEL)
  SET(LIBPROX_TOP_LEVEL ${CMAKE_CURRENT_SOURCE_DIR}/..)
ENDIF()
GET_FILENAME_COMPONENT(LIBPROX_TOP_LEVEL ${LIBPROX_TOP_LEVEL} ABSOLUTE)

#add-ins
IF(NOT CMAKE_MODULE_PATH)
  SET(CMAKE_MODULE_PATH ${LIBPROX_TOP_LEVEL}/build/modules)
ENDIF()
GET_FILENAME_COMPONENT(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ABSOLUTE)

MACRO(VERIFY_VERSION package_name major minor subminor)
  IF (${package_name}_MAJOR_VERSION LESS ${major})
    MESSAGE(FATAL_ERROR "${package_name} out of date: ${major}.${minor}.${subminor}")
  ELSEIF(${package_name}_MAJOR_VERSION EQUAL ${major})
    IF(${package_name}_MINOR_VERSION LESS ${minor})
       MESSAGE(FATAL_ERROR "${package_name} out of date: ${major}.${minor}.${subminor}")
    ELSEIF(${package_name}_MINOR_VERSION EQUAL ${major})
      IF(${package_name}_SUBMINOR_VERSION LESS ${subminor})
        MESSAGE(FATAL_ERROR "${package_name} out of date: ${major}.${minor}.${subminor}")
      ENDIF()
    ENDIF()
  ENDIF()
ENDMACRO(VERIFY_VERSION)


#libraries

#dependency: boost > 1.35
# May have already been satisfied by parent project
IF(NOT Boost_FOUND)
  IF(NOT BOOST_ROOT)
    # FIXME This is gross, but should allow prox to find cbr's boost
    # without a problem
    SET(BOOST_ROOT ${LIBPROX_TOP_LEVEL}/../sirikata/dependencies)
    GET_FILENAME_COMPONENT(BOOST_ROOT ${BOOST_ROOT} ABSOLUTE)
  ENDIF()
  SET(Boost_FIND_REQUIRED TRUE)
  IF(WIN32)
    FIND_PACKAGE(Boost COMPONENTS thread date_time)
  ELSE()
    FIND_PACKAGE(Boost COMPONENTS system)
    STRING(REPLACE "boost_system" "boost_thread" Boost_THREAD_LIBRARY "${Boost_SYSTEM_LIBRARY}")
    STRING(REPLACE "boost_system" "boost_date_time" Boost_DATE_TIME_LIBRARY "${Boost_SYSTEM_LIBRARY}")
  ENDIF()
ENDIF()
VERIFY_VERSION(Boost 1 35 0)

#dependency: glut
IF(LIBPROX_BUILD_PROXSIM)
  FIND_PACKAGE(OpenGL)
  FIND_PACKAGE(GLUT)
  IF(NOT OPENGL_FOUND OR NOT GLUT_FOUND)
    SET(LIBPROX_SHOULD_BUILD_PROXSIM FALSE)
  ENDIF(NOT OPENGL_FOUND OR NOT GLUT_FOUND)
ENDIF()

#dependency: cxxtest
SET(CXXTEST_ROOT ${LIBPROX_TOP_LEVEL}/externals/cxxtest)
IF(LIBPROX_BUILD_TESTS)
  FIND_PACKAGE(CxxTest)
  IF(NOT CXXTEST_FOUND)
    SET(LIBPROX_SHOULD_BUILD_TESTS FALSE)
    MESSAGE(STATUS "Not building tests as requested because CxxTest was not found.")
  ENDIF()
ENDIF()

#project locations
SET(LIBPROX_ROOT ${LIBPROX_TOP_LEVEL}/libprox)
SET(PROXSIM_ROOT ${LIBPROX_TOP_LEVEL}/proxsim)
SET(GEOM_PROXSIM_ROOT ${LIBPROX_TOP_LEVEL}/proxsim/geom)
SET(MANUAL_PROXSIM_ROOT ${LIBPROX_TOP_LEVEL}/proxsim/manual)
SET(LIBPROX_TESTS_ROOT ${LIBPROX_TOP_LEVEL}/test)

#include/source file location
SET(LIBPROX_INCLUDE_DIR ${LIBPROX_ROOT}/include)
SET(LIBPROX_SOURCE_DIR ${LIBPROX_ROOT}/src)

SET(LIBPROXSIMCORE_SOURCE_DIR ${PROXSIM_ROOT}/proxsimcore)
SET(GEOM_PROXSIM_SOURCE_DIR ${GEOM_PROXSIM_ROOT})
SET(MANUAL_PROXSIM_SOURCE_DIR ${MANUAL_PROXSIM_ROOT})

SET(LIBPROX_TESTS_SOURCE_DIR ${LIBPROX_TESTS_ROOT})

#cxx flags
SET(LIBPROX_INCLUDE_DIRS ${LIBPROX_INCLUDE_DIR} ${Boost_INCLUDE_DIRS})
IF(LIBPROX_SHOULD_BUILD_PROXSIM)
  SET(LIBPROX_INCLUDE_DIRS ${LIBPROX_INCLUDE_DIRS} ${PROXSIM_ROOT} ${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIR})
ENDIF()
IF(LIBPROX_SHOULD_BUILD_TESTS)
  SET(LIBPROX_INCLUDE_DIRS ${LIBPROX_INCLUDE_DIRS} ${CXXTEST_INCLUDE_PATHS})
ENDIF()
INCLUDE_DIRECTORIES(BEFORE ${LIBPROX_INCLUDE_DIRS})
# Export include directories for parent projects
SET_PROPERTY(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY LIBPROX_INCLUDE_DIRS ${LIBPROX_INCLUDE_DIRS})
#source files
SET(LIBPROX_SOURCES
  ${LIBPROX_SOURCE_DIR}/BoundingSphere.cpp
  ${LIBPROX_SOURCE_DIR}/DefaultSimulationTraits.cpp
  ${LIBPROX_SOURCE_DIR}/Duration.cpp
  ${LIBPROX_SOURCE_DIR}/SolidAngle.cpp
  ${LIBPROX_SOURCE_DIR}/Time.cpp
  ${LIBPROX_SOURCE_DIR}/UniqueID.cpp
)


SET(LIBPROXSIMCORE_SOURCES
  ${LIBPROXSIMCORE_SOURCE_DIR}/Object.cpp
  ${LIBPROXSIMCORE_SOURCE_DIR}/ObjectLocationServiceCache.cpp
  ${LIBPROXSIMCORE_SOURCE_DIR}/Timer.cpp
  ${LIBPROXSIMCORE_SOURCE_DIR}/GLRendererBase.cpp
  ${LIBPROXSIMCORE_SOURCE_DIR}/SimulatorBase.cpp
  ${LIBPROXSIMCORE_SOURCE_DIR}/CSVLoader.cpp
)

SET(GEOM_PROXSIM_SOURCES
  ${GEOM_PROXSIM_SOURCE_DIR}/GLRenderer.cpp
  ${GEOM_PROXSIM_SOURCE_DIR}/Simulator.cpp
  ${GEOM_PROXSIM_SOURCE_DIR}/Querier.cpp
  ${GEOM_PROXSIM_SOURCE_DIR}/main.cpp
  ${GEOM_PROXSIM_SOURCE_DIR}/CSVLoader.cpp
)

SET(MANUAL_PROXSIM_SOURCES
  ${MANUAL_PROXSIM_SOURCE_DIR}/GLRenderer.cpp
  ${MANUAL_PROXSIM_SOURCE_DIR}/Simulator.cpp
  ${MANUAL_PROXSIM_SOURCE_DIR}/Querier.cpp
  ${MANUAL_PROXSIM_SOURCE_DIR}/CSVLoader.cpp
  ${MANUAL_PROXSIM_SOURCE_DIR}/main.cpp
)

# input tests
SET(LIBPROX_TESTS_TEST_SOURCES
  ${LIBPROX_TESTS_SOURCE_DIR}/QueryCacheTest.hpp
  )
# source that actually gets compiled
SET(LIBPROX_TESTS_SOURCES
  ${LIBPROX_TESTS_SOURCE_DIR}/Test.cpp
  ${LIBPROX_TESTS_SOURCE_DIR}/GeneratedTestSuite.cpp
)

#link flags
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

#demos - library & binaires
IF(LIBPROX_SHOULD_BUILD_PROXSIM)
  #libraries
  ADD_LIBRARY(prox STATIC ${LIBPROX_SOURCES})
  TARGET_LINK_LIBRARIES(prox ${LIBPROX_LIBRARIES} ${Boost_THREAD_LIBRARY})

  #binaries
  ADD_LIBRARY(proxsimcore STATIC ${LIBPROXSIMCORE_SOURCES})

  # Libs for any proxsim binaries
  SET(PROXSIM_BINARY_LIBS proxsimcore prox ${Boost_THREAD_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${OPENGL_LIBRARIES} ${GLUT_LIBRARIES})

  ADD_EXECUTABLE(proxsim ${GEOM_PROXSIM_SOURCES})
  TARGET_LINK_LIBRARIES(proxsim ${PROXSIM_BINARY_LIBS})

  ADD_EXECUTABLE(manual_proxsim ${MANUAL_PROXSIM_SOURCES})
  TARGET_LINK_LIBRARIES(manual_proxsim ${PROXSIM_BINARY_LIBS})

  GET_TARGET_PROPERTY(PROX_DEFS prox COMPILE_DEFINITIONS)
  GET_TARGET_PROPERTY(PROXSIM_DEFS proxsim COMPILE_DEFINITIONS)
  GET_TARGET_PROPERTY(MANUAL_PROXSIM_DEFS manual_proxsim COMPILE_DEFINITIONS)
ENDIF()

#tests
IF(LIBPROX_SHOULD_BUILD_TESTS)
  ADD_CXXTEST_CPP_TARGET(
    ${LIBPROX_TESTS_TEST_SOURCES}
    OUTPUT ${LIBPROX_TESTS_SOURCE_DIR}/GeneratedTestSuite.cpp
    )

  # Libs for any proxsim binaries
  SET(LIBPROX_TESTS_BINARY_LIBS prox ${Boost_THREAD_LIBRARY} ${Boost_DATE_TIME_LIBRARY})
  ADD_EXECUTABLE(libprox_tests ${LIBPROX_TESTS_SOURCES} ${LIBPROX_TESTS_TEST_SOURCES})
  TARGET_LINK_LIBRARIES(libprox_tests ${LIBPROX_TESTS_BINARY_LIBS})
  GET_TARGET_PROPERTY(TESTS_DEFS libprox_tests COMPILE_DEFINITIONS)
ENDIF()


SET(ALL_ADDITIONAL_DEFS)

# define debug preprocessor symbol
IF(LIBPROX_DEBUG_VALIDATE)
  IF(LIBPROX_SHOULD_BUILD_PROXSIM)
    SET(PROX_DEFS ${PROX_DEFS} PROXDEBUG)
    SET(PROXSIM_DEFS ${PROXSIM_DEFS} PROXDEBUG)
    SET(MANUAL_PROXSIM_DEFS ${MANUAL_PROXSIM_DEFS} PROXDEBUG)
  ENDIF()
  IF(LIBPROX_SHOULD_BUILD_TESTS)
    SET(TESTS_DEFS ${TESTS_DEFS} PROXDEBUG)
  ENDIF()
  SET(ALL_ADDITIONAL_DEFS ${ALL_ADDITIONAL_DEFS} -DPROXDEBUG)
ENDIF()

# RTree internal data type - just bounds vs. bounds + max size
SET(LIBPROX_RTREE_DATA_DEFS
  LIBPROX_RTREE_DATA_BOUNDS=1
  LIBPROX_RTREE_DATA_MAXSIZE=2
  LIBPROX_RTREE_DATA_SIMILARMAXSIZE=3
  LIBPROX_RTREE_DATA=LIBPROX_RTREE_DATA_${LIBPROX_RTREE_DATA}
  )

IF(LIBPROX_SHOULD_BUILD_PROXSIM)
  SET_TARGET_PROPERTIES(prox PROPERTIES COMPILE_DEFINITIONS "${LIBPROX_RTREE_DATA_DEFS}")
  SET_TARGET_PROPERTIES(proxsim PROPERTIES COMPILE_DEFINITIONS "${LIBPROX_RTREE_DATA_DEFS}")
  SET_TARGET_PROPERTIES(manual_proxsim PROPERTIES COMPILE_DEFINITIONS "${LIBPROX_RTREE_DATA_DEFS}")
ENDIF()
IF(LIBPROX_SHOULD_BUILD_TESTS)
  SET_TARGET_PROPERTIES(libprox_tests PROPERTIES COMPILE_DEFINITIONS "${LIBPROX_RTREE_DATA_DEFS}")
ENDIF()
FOREACH(XDEF ${LIBPROX_RTREE_DATA_DEFS})
  SET(ALL_ADDITIONAL_DEFS ${ALL_ADDITIONAL_DEFS} -D${XDEF})
ENDFOREACH()


# Lifting cuts vs. adjusting cuts
IF(LIBPROX_RTREE_LIFT_CUTS)
  IF(LIBPROX_SHOULD_BUILD_PROXSIM)
    SET(PROX_DEFS ${PROX_DEFS} LIBPROX_LIFT_CUTS)
    SET(PROXSIM_DEFS ${PROXSIM_DEFS} LIBPROX_LIFT_CUTS)
    SET(MANUAL_PROXSIM_DEFS ${MANUAL_PROXSIM_DEFS} LIBPROX_LIFT_CUTS)
  ENDIF()
  IF(LIBPROX_SHOULD_BUILD_TESTS)
    SET(TESTS_DEFS ${TESTS_DEFS} LIBPROX_LIFT_CUTS)
  ENDIF()
  SET(ALL_ADDITIONAL_DEFS ${ALL_ADDITIONAL_DEFS} -DLIBPROX_LIFT_CUTS)
ENDIF()

# Finally add the definitions for all these options
ADD_DEFINITIONS(${ALL_ADDITIONAL_DEFS})
# Export extra definitions for parent projects
SET_PROPERTY(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY LIBPROX_EXTRA_DEFINITIONS ${ALL_ADDITIONAL_DEFS})


#installation information
INSTALL(DIRECTORY
          # note: the trailing slashes avoid prepending the directory name
          # itself to the installed files
          ${LIBPROX_INCLUDE_DIR}/
        DESTINATION include/
        PATTERN "*.cpp" EXCLUDE
        PATTERN "*.cc" EXCLUDE
        PATTERN "*.hh" EXCLUDE
)
IF(LIBPROX_SHOULD_BUILD_PROXSIM)
  INSTALL(TARGETS prox
          RUNTIME
            DESTINATION bin
          LIBRARY
            DESTINATION lib
          ARCHIVE
            DESTINATION lib
            )
ENDIF()
