# Find CxxTest, including cxxtestgen script and include paths.
#
# Inputs:
#  CXXTEST_ROOT - an additional base search path for cxxtest
# Outputs:
#  CXXTEST_FOUND - boolean indicating whether all cxxtest components were found
#  CXXTEST_COMPILER - compiler binary if you want to invoke it yourself
#  CXXTEST_INCLUDE_PATHS - list of include paths
#  ADD_CXXTEST_CPP_TARGET([DEPENDS dependencies] test1.hpp test2.hpp ...)
#    - macro for creating an output test C++ file from a set of input
#  test header files.

SET(CXXTEST_FOUND FALSE)
SET(CXXTEST_COMPILER)
SET(CXXTEST_INCLUDE_PATHS)

# Helper scripts
INCLUDE(ListUtil)
INCLUDE(ParseArguments)

# Must have python
FIND_PACKAGE(PythonInterp)
IF(PYTHONINTERP_FOUND)
  # Setup search paths
  SET(CXXTEST_GEN_SCRIPT_SEARCH_PATHS)
  SET(CXXTEST_INCLUDE_SEARCH_PATHS)
  IF(CXXTEST_ROOT AND IS_DIRECTORY ${CXXTEST_ROOT})
    SET(CXXTEST_INCLUDE_SEARCH_PATHS ${CXXTEST_ROOT})
    IF(IS_DIRECTORY "${CXXTEST_ROOT}/bin")
      SET(CXXTEST_GEN_SCRIPT_SEARCH_PATHS ${CXXTEST_GEN_SCRIPT_SEARCH_PATHS} "${CXXTEST_ROOT}/bin")
    ENDIF()
  ENDIF()

  # and perform search for cxxtestgen
  SET(CXXTEST_GEN_SCRIPT)
  FIND_FILE(CXXTEST_GEN_SCRIPT cxxtestgen
    PATHS ${CXXTEST_GEN_SCRIPT_SEARCH_PATHS})
  # and headers
  SET(CXXTEST_INCLUDE_PATHS)
  FIND_PATH(CXXTEST_INCLUDE_PATHS cxxtest/TestSuite.h
    PATHS ${CXXTEST_INCLUDE_SEARCH_PATHS})

  IF(CXXTEST_GEN_SCRIPT)
    SET(CXXTEST_COMPILER ${PYTHON_EXECUTABLE} ${CXXTEST_GEN_SCRIPT})
  ENDIF()

ENDIF()

# Results
IF(CXXTEST_COMPILER AND CXXTEST_INCLUDE_PATHS)
  SET(CXXTEST_FOUND TRUE)
  MESSAGE(STATUS "cxxtest found, compiler command is ${CXXTEST_COMPILER} and headers are in ${CXXTEST_INCLUDE_PATHS}")
ELSE()
  SET(CXXTEST_FOUND FALSE)
  MESSAGE(STATUS "cxxtest not found.")
ENDIF()


# and a helpful macro if we found everything
IF(CXXTEST_FOUND)
  MACRO(ADD_CXXTEST_CPP_TARGET)
    PARSE_ARGUMENTS(CXXTEST "DEPENDS;OUTPUT" "" ${ARGN})
    SET(CXXTEST_FILES ${CXXTEST_DEFAULT_ARGS})

    SET(CXXTEST_TEST_FILES)
    SET(CXXTEST_H_FILES)
    SET(CXXTEST_OPTIONS)

    FOREACH(FILE ${CXXTEST_FILES})
      SET(CXXTEST_H_FILE ${FILE})
      SET(CXXTEST_TEST_FILES ${CXXTEST_TEST_FILES} ${CXXTEST_H_FILE})
    ENDFOREACH()

    SET(FINAL_CXXTEST_COMMAND ${CXXTEST_COMPILER} ${CXXTEST_GEN} ${CXXTEST_OPTIONS} -o ${CXXTEST_OUTPUT} ${CXXTEST_TEST_FILES})
    ADD_CUSTOM_COMMAND(OUTPUT ${CXXTEST_OUTPUT}
      COMMAND ${CXXTEST_COMPILER} ${CXXTEST_GEN} ${CXXTEST_OPTIONS} -o ${CXXTEST_OUTPUT} ${CXXTEST_TEST_FILES}
      DEPENDS ${CXXTEST_TEST_FILES} ${CXXTEST_DEPENDS} ${CXXTEST_GEN}
      COMMENT "Building ${CXXTEST_TEST_FILES} -> ${CXXTEST_OUTPUT}")

    SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${CXXTEST_OUTPUT})
  ENDMACRO(ADD_CXXTEST_CPP_TARGET)
ENDIF()
